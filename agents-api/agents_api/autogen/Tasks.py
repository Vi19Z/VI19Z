# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field

from .Chat import ChatSettings
from .Docs import (
    EmbedQueryRequest,
    HybridDocSearchRequest,
    TextOnlyDocSearchRequest,
    VectorDocSearchRequest,
)
from .Entries import InputChatMLMessage
from .Tools import CreateToolRequest


class BaseWorkflowStep(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal[
        "tool_call",
        "prompt",
        "evaluate",
        "wait_for_input",
        "log",
        "embed",
        "search",
        "set",
        "get",
        "foreach",
        "map_reduce",
        "parallel",
        "switch",
        "if_else",
        "sleep",
        "return",
        "yield",
        "error",
    ]
    """
    The kind of step
    """


class CaseThen(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    case: str
    """
    The condition to evaluate
    """
    then: (
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
    )
    """
    The steps to run if the condition is true
    """


class CreateTaskRequest(BaseModel):
    """
    Payload for creating a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
        | IfElseWorkflowStep
        | SwitchStep
        | ForeachStep
        | ParallelStep
        | MapReduceStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class EmbedStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["embed"] = "embed"
    embed: EmbedQueryRequest
    """
    The text to embed
    """


class ErrorWorkflowStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["error"] = "error"
    error: str
    """
    The error message
    """


class EvaluateStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["evaluate"] = "evaluate"
    evaluate: dict[str, str]
    """
    The expression to evaluate
    """


class ForeachDo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    in_: Annotated[str, Field(alias="in")]
    """
    The variable to iterate over
    """
    do: list[
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
    ]
    """
    The steps to run for each iteration
    """


class ForeachStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["foreach"] = "foreach"
    foreach: ForeachDo
    """
    The steps to run for each iteration
    """


class GetStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["get"] = "get"
    get: str
    """
    The key to get
    """


class IfElseWorkflowStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["if_else"] = "if_else"
    if_: Annotated[str, Field(alias="if")]
    """
    The condition to evaluate
    """
    then: (
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
    )
    """
    The steps to run if the condition is true
    """
    else_: Annotated[
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep,
        Field(alias="else"),
    ]
    """
    The steps to run if the condition is false
    """


class LogStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["log"] = "log"
    log: str
    """
    The value to log
    """


class MapOver(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    over: str
    """
    The variable to iterate over
    """
    workflow: str
    """
    The subworkflow to run for each iteration
    """


class MapReduceStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["map_reduce"] = "map_reduce"
    map: MapOver
    """
    The steps to run for each iteration
    """
    reduce: str
    """
    The expression to reduce the results (`_` is a list of outputs)
    """


class ParallelStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["parallel"] = "parallel"
    parallel: list[
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
    ]
    """
    The steps to run in parallel. Max concurrency will depend on the platform
    """


class PatchTaskRequest(BaseModel):
    """
    Payload for patching a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: str = ""
    main: (
        list[
            EvaluateStep
            | ToolCallStep
            | YieldStep
            | PromptStep
            | ErrorWorkflowStep
            | SleepStep
            | ReturnStep
            | GetStep
            | SetStep
            | LogStep
            | EmbedStep
            | SearchStep
            | WaitForInputStep
            | IfElseWorkflowStep
            | SwitchStep
            | ForeachStep
            | ParallelStep
            | MapReduceStep
        ]
        | None
    ) = None
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class PromptStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["prompt"] = "prompt"
    prompt: str | list[InputChatMLMessage]
    """
    The prompt to run
    """
    settings: ChatSettings
    """
    Settings for the prompt
    """


class ReturnStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["return"] = "return"
    return_: Annotated[dict[str, str], Field(alias="return")]
    """
    The value to return
    """


class SearchStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["search"] = "search"
    search: VectorDocSearchRequest | TextOnlyDocSearchRequest | HybridDocSearchRequest
    """
    The search query
    """


class SetKey(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: str
    """
    The key to set
    """
    value: str
    """
    The value to set
    """


class SetStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["set"] = "set"
    set: SetKey | list[SetKey]
    """
    The value to set
    """


class SleepFor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    seconds: Annotated[int, Field(0, ge=0)]
    """
    The number of seconds to sleep for
    """
    minutes: Annotated[int, Field(0, ge=0)]
    """
    The number of minutes to sleep for
    """
    hours: Annotated[int, Field(0, ge=0)]
    """
    The number of hours to sleep for
    """
    days: Annotated[int, Field(0, ge=0)]
    """
    The number of days to sleep for
    """


class SleepStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["sleep"] = "sleep"
    sleep: SleepFor
    """
    The duration to sleep for
    """


class SwitchStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["switch"] = "switch"
    switch: list[CaseThen]
    """
    The cond tree
    """


class Task(BaseModel):
    """
    Object describing a Task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
        | IfElseWorkflowStep
        | SwitchStep
        | ForeachStep
        | ParallelStep
        | MapReduceStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    metadata: dict[str, Any] | None = None


class TaskTool(CreateToolRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inherited: Annotated[bool, Field(False, json_schema_extra={"readOnly": True})]
    """
    Read-only: Whether the tool was inherited or not. Only applies within tasks.
    """


class ToolCallStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["tool_call"] = "tool_call"
    tool: Annotated[
        str, Field(pattern="^(function|integration|system|api_call)\\.(\\w+)$")
    ]
    """
    The tool to run
    """
    arguments: dict[str, Any]
    """
    The input parameters for the tool
    """


class UpdateTaskRequest(BaseModel):
    """
    Payload for updating a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | SleepStep
        | ReturnStep
        | GetStep
        | SetStep
        | LogStep
        | EmbedStep
        | SearchStep
        | WaitForInputStep
        | IfElseWorkflowStep
        | SwitchStep
        | ForeachStep
        | ParallelStep
        | MapReduceStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class WaitForInputStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["wait_for_input"] = "wait_for_input"
    info: str | dict[str, Any]
    """
    Any additional info or data
    """


class YieldStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["yield"] = "yield"
    workflow: str
    """
    The subworkflow to run
    """
    arguments: dict[str, str]
    """
    The input parameters for the subworkflow
    """

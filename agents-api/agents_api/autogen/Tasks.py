# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field

from .Chat import ChatSettings
from .Entries import InputChatMLMessage
from .Tools import CreateToolRequest


class BaseWorkflowStep(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal[
        "tool_call", "yield", "prompt", "evaluate", "if_else", "wait_for_input", "error"
    ]
    """
    The kind of step
    """


class CreateTaskRequest(BaseModel):
    """
    Payload for creating a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | WaitForInputStep
        | IfElseWorkflowStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class ErrorWorkflowStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["error"] = "error"
    error: str
    """
    The error message
    """


class EvaluateStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["evaluate"] = "evaluate"
    evaluate: dict[str, str]
    """
    The expression to evaluate
    """


class IfElseWorkflowStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["if_else"] = "if_else"
    if_: Annotated[str, Field(alias="if")]
    """
    The condition to evaluate
    """
    then: (
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | WaitForInputStep
    )
    """
    The steps to run if the condition is true
    """
    else_: Annotated[
        Any
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | WaitForInputStep,
        Field(alias="else"),
    ]
    """
    The steps to run if the condition is false
    """


class PatchTaskRequest(BaseModel):
    """
    Payload for patching a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: str = ""
    main: (
        list[
            EvaluateStep
            | ToolCallStep
            | YieldStep
            | PromptStep
            | ErrorWorkflowStep
            | WaitForInputStep
            | IfElseWorkflowStep
        ]
        | None
    ) = None
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class PromptStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["prompt"] = "prompt"
    prompt: str | list[InputChatMLMessage]
    """
    The prompt to run
    """
    settings: ChatSettings
    """
    Settings for the prompt
    """


class Task(BaseModel):
    """
    Object describing a Task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | WaitForInputStep
        | IfElseWorkflowStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    metadata: dict[str, Any] | None = None


class TaskTool(CreateToolRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inherited: Annotated[bool, Field(False, json_schema_extra={"readOnly": True})]
    """
    Read-only: Whether the tool was inherited or not. Only applies within tasks.
    """


class ToolCallStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["tool_call"] = "tool_call"
    tool: Annotated[
        str, Field(pattern="^(function|integration|system|api_call)\\.(\\w+)$")
    ]
    """
    The tool to run
    """
    arguments: dict[str, Any]
    """
    The input parameters for the tool
    """


class UpdateTaskRequest(BaseModel):
    """
    Payload for updating a task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: str = ""
    main: list[
        EvaluateStep
        | ToolCallStep
        | YieldStep
        | PromptStep
        | ErrorWorkflowStep
        | WaitForInputStep
        | IfElseWorkflowStep
    ]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[TaskTool] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    metadata: dict[str, Any] | None = None


class WaitForInputStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["wait_for_input"] = "wait_for_input"
    info: str | dict[str, Any]
    """
    Any additional info or data
    """


class YieldStep(BaseWorkflowStep):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind_: Literal["yield"] = "yield"
    workflow: str
    """
    The subworkflow to run
    """
    arguments: dict[str, str]
    """
    The input parameters for the subworkflow
    """
